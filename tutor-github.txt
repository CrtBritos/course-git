TUTORIAL GIT E GITHUB
﻿
EXPLICACAÇÂO SOBRE GIT
GIT é uma ferramenta de controle de versionamento de arquivos.
GIT, em algumas OS por padrão ja vem instalado como no LINUX, ou para sua instalação consulte  Git install

EXPLICACAÇÂO SOBRE GIT
GITHUB é uma plataforma (web) de hospedagem de arquivos, código-fonte e colaboração, baseada no sistema de controle de versões Git, onde podemos criar repositórios. 


GIT FILES CONFIGURATION
Git utiliza vários arquivos de configuração para gerenciar suas configurações e preferências.
Os principais são:

1) .git/config: Este é o arquivo de configuração local de um repositório. Ele armazena configurações específicas para aquele repositório, como remotos, branches e opções específicas do projeto.
2) ~/.gitconfig (ou ~/.config/git/config): Este é o arquivo de configuração global do usuário. As configurações aqui se aplicam a todos os repositórios do usuário no sistema. Pode incluir informações como nome de usuário e e-mail, preferências de merge, entre outras.
3) /etc/gitconfig: Este é o arquivo de configuração do sistema. As configurações aqui se aplicam a todos os usuários e repositórios no sistema. É usado para definir configurações que são comuns a todos os usuários.

Git também permite que você especifique configurações temporárias diretamente na linha de comando usando as opções:
git config --global
git config --system
git config --local	


GIT INITIAL CONFIGUTATION (terminal)
-> definição do user para GIT
git config --global user.name “nameUserGIT” 

-> definição de email do user GIT
git config --global user.email “emailUserGIT”

-> definição do editor default para GIT (opcional)
git config --global core.editor subl (sublime) 

-> Conferindo configurações
git config user.name
git config user.email
git config core.editor

git config –list (configurações geral GIT GLobal)


GIT REPOSITORY INITIAL CONFIGURATION (local)
Explicação e entendimento do Ciclo de vida GIT (status dos arquivos no repo) em 4 stage

untracked -> significa arquivos criado no diretório ( mais o GIT ainda não reconhece o arquivo no repo)
unmodified -> aquivo reconhecido pelo GIT repo, porem não modificado.
modified -> arquivo reconhecido no GIT repo, indicando alguma modificação.
staged -> arquivo reconhecido no GIT repo e vercionado (commit) 


Inicialização no diretory:
-> initial repo GIT
git init

-> verificação do status do GIT (files)
git status

-> adicionar arquivo no repo GIT
git add file

-> inserindo arquivo no STAGED (area de vercionamento)
git commit -m "comentario" (para arquivos novos)
git commit -am "comentario" (para arquivos ja existente)

Visualizando log
-> visualização de log (commit)
git log 

-> visualização de log com especificação dos BRANCH
git log –decorate

-> visualiza log do author especificados 
git log –author=”name_do_author”

-> visualiza log em uma versão mais curta de todos os authores e seus comites ordenados.
git shortlog

-> visualiza um resumo de log dos authores e quantidade de commit realizados.
git shortlog -sn

-> visualiza em modo graficos dos log efetuados pelos authores
git log --graph 

-> visualiza log modo detalhado os commit referente ao rash informado.
git log show “numero_rash” 


Visualizando log de alteração feita antes de commitar
-> visualiza alterações feitas antes de ser adicionado para area de transferencia (modified)
git diff 

-> visualiza nome dos arquivo que houveram alterações.
git diff --name-only 

-> deletando/remove ultimo estado do arquivo (até ficar em seu estado inicial)
git checkout file 

-> remove arquivo do Staged
git reset HEAD file


Remove estado file (cuidado)
git reset --soft, --mix, --hard “numero_rash”
 
--soft  remove commit, deixando o arquivo pronto para ser comitado novamente com a (modified) anterior a ultima modified
--mix  remove o comite, deixando o arquivo no estado de (modified)
--hard remove o commite, deixando o arquivo em seu estado inicial.

Obs:. git reset hard altera o historico fdo git, sendo necessário atualizar o historico do git com 'FORCE'


REPOSITORY REMOTE GITHUB

- criar repository no GITHUB
- criar chaves SSH local GIT e copiar a chave PUB para GITHUB -  help ssh_GitHub

Create a new repository on the command line

echo "#" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:...
git push -u origin main

Or push an existing repository from the command line

git remote add origin git@github.com:...
git branch -M main
git push -u origin main


Comando para manuipulação 
-> vizualiza o nome do repo remote existent
git remote 

-> visualiza detalahamente o repo remoto existent
git remote -v 

-> envia arquivo para repo remoto
git push -u origin main 

-> clonar repo (fazer uma copia perfeita do repo referencioado)
git clone end_repo_remoto name_para_repo_local

-> fork repo (copia o repo referenciado, podendo altera-lo e o reenvia-lo devolta com as alterações por (request))
button direto no repo


RAMIFICAÇÂO BRANCH
Um "Branch" no Git é uma versão paralela do repositório. Ele permite que você trabalhe em diferentes funcionalidades ou correções de bugs 
sem afetar a "Branch" principal (geralmente chamada de "main" ou "master").
Resumindo, "Branch" é um ponteiro movel que leva o COMMIT.

Vantagem para se ter um "Branch"
- modificar sem alterar o local(Branch) principal(master)
- facilmente "desligavel"
- múltiplas pessoas trabalhando
- evita conflitos

-> criar um Branch
git branch "name_branch"

-> criando um Branch, mudando imediatamente para o Branch criado
git checkout -b "name_branch"

-> mudar de Branch
git checkout "name_branch"
or
git switch "name_branch"

-> verificação de Branch existentes (* informa o Branch atual logado)
git branch

-> deletar/remove Branch (local)
git branch -D "name_branch"


UNINDO BRANCHES (merge/rebase)

Vantagem
merge - uma operação não destrutiva
rebase - evita commits extra
rebase - histórico linear

Desvantagem
merge - cria um novo commit para união do Branch
rebase - perde a ordem cronologicas



EXTRAS
""""""
GIT IGNORE (arquivo configurável para padrão não utilizável)
-> criação de file .gitignore  
mkdir .gitignore

gitignore documentation => https://git-scm.com/docs/gitignore
gitignore template => https://github.com/github/gitignore

--------------

GIT STASH (guarda informação que não foram commited, podendo recupera-las posteriormente)
-> guardando modificações não commited
git stash 

-> recuperando modificação não commited para commited
git stash apply

-> listando alterações guardadas no "STASH"
git stash list

-> limpando alterações guardadas no "STASH"
git stash clear

---------------

ALIAS (atalhos command)
-> criando 'alias' 
git config --global alias.?  command
git config --global alias.s status

git s => executa o command git status

---------------

TAGS (release/ versões) - repo remote (aba release)
-> criando tags GITHUB
git tag -a 1.0.0 -m "annotation"

-> ativação tags GITHUB repo remote
git push origin master --tags

-> visualização de tags geradas
git tag

-> deletar/remover tags (local)
git tag -D "name_tag"

---------------

REVERT GIT
git revert é utilizado para desfazer as alterações de um commit específico de maneira segura e controlada. 
Aqui estão alguns dos principais usos e benefícios:

1)Desfazer alterações no histórico: Ao contrário do git reset, que pode remover commits, o git revert cria um novo commit que desfaz as alterações realizadas por um commit anterior. Isso é útil para manter um histórico claro.

2) Colaboração em equipe: Quando você trabalha em equipe, o git revert é preferível porque não reescreve o histórico compartilhado. Assim, todos os membros da equipe podem ver quais alterações foram revertidas sem confusões.

3) Identificar erros: Se um erro é introduzido em um commit, você pode usar o git revert para corrigi-lo facilmente. Isso permite que você continue desenvolvendo sem perder o contexto do trabalho anterior.

4) Testar alterações: Se você não tem certeza se quer manter certas alterações, pode reverter um commit e, em seguida, decidir se deseja reaplicá-las mais tarde.

"git revert" é uma ferramenta valiosa para manter a integridade do histórico de commits enquanto desfaz alterações de maneira controlada.

-> revertendo um commit
git revert "number_rash"

---------------

REMOVER / DELETAR (tag, branch)

git tag -D 'nameTag'  (local)
git branch -D 'nameBranch' (local)
git push origin :nameTag (remote)
git push origin :nameBranch (remote)